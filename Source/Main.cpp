/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "publicHeader.h"
#include "MainComponent.h"
#include "encoderManager.h"
#include "cmdline.h"
#include "helpFunctions.h"
#include "windows.h"
//==============================================================================
class silentEncoderApplication  : public JUCEApplication
{
public:
    //==============================================================================
    silentEncoderApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
#ifdef NDEBUG
    bool moreThanOneInstanceAllowed() override       { return false; }
#else
	bool moreThanOneInstanceAllowed() override       { return true; }
#endif//NDEBUG

	void initCmdLine(cmdline::parser& cl)
	{
		// create
		cl.add<std::string>(CMD_ENCODER_CREATE, 'c', "create a silent encoder", false, CMD_ENCODER_CREATE_TYPE_SAVEFILE, \
			cmdline::oneof<std::string>( \
			CMD_ENCODER_CREATE_TYPE_HARDWARE, \
			CMD_ENCODER_CREATE_TYPE_SAVEFILE, \
			CMD_ENCODER_CREATE_TYPE_RTP, \
			CMD_ENCODER_CREATE_TYPE_RTMP
			));
		// destroy
		cl.add(CMD_ENCODER_DESTROY, 'd', "destroy a exist silent encoder");
		// name
		cl.add<std::string>(CMD_ENCODER_NAME, 'n', "the encoder's name", false, "");
		// ini file path
		cl.add<std::string>(CMD_ENCODER_INIFILE, '\0', "the file full path for ini", false, "");
		// bye
		cl.add(CMD_ENCODER_BYE, '\0', "encoder manager quit");
		// reset
		cl.add(CMD_ENCODER_RESET, '\0', "stop all exist encoders");
		//memory ini file path
		cl.add<std::string>(CMD_ENCODER_MEM_INIFILE, '\0', "the file full path for memory ini", false, "");
	}
	
	void checkCmdLine(const String& commandLine)
	{
		cmdline::parser cl;
		initCmdLine(cl);
		// parser command line
		if (commandLine.isNotEmpty())
		{
			std::string strCmd = commandLine.toRawUTF8();
			try
			{
				cl.parse_check(strCmd);
			}
			catch (...)
			{
				return;
			}
		}
		if (cl.exist(CMD_ENCODER_BYE))
		{
			quit();
			return;
		}
		else if (cl.exist(CMD_ENCODER_RESET))
		{
			encoderManager->reset();
		}
		else
		{

			String strEncoderName = cl.get<std::string>(CMD_ENCODER_NAME);
			if (strEncoderName.isEmpty())
				return;

			if (cl.exist(CMD_ENCODER_CREATE))
			{
				String strCreateType = cl.get<std::string>(CMD_ENCODER_CREATE);
				String strIniFilePath = cl.get<std::string>(CMD_ENCODER_INIFILE);
				String strMemIniFilePath = cl.get<std::string>(CMD_ENCODER_MEM_INIFILE);

				if (encoderManager->createEncoder(strCreateType, strEncoderName, strIniFilePath, strMemIniFilePath) == 0)
				{

				}
			}
			else if (cl.exist(CMD_ENCODER_DESTROY))
			{
				String strIniFilePath = cl.get<std::string>(CMD_ENCODER_INIFILE);
				String strMemIniPath = cl.get<std::string>(CMD_ENCODER_MEM_INIFILE);
				PropertySet* newSetting = readPropertiesFromIni(strIniFilePath, strMemIniPath);
				if (!newSetting)
					return;
				encoderManager->destroyEncoder(newSetting->getValue(KEY_MEM_VIDEO_NAME), newSetting->getValue(KEY_MEM_AUDIO_NAME), strEncoderName);
				deleteAndZero(newSetting);
			}
		}
	}

    //==============================================================================
    void initialise (const String& commandLine) override
    {
        // This method is where you should put your application's initialisation code..
		instalCrashReport();
		if (commandLine.containsIgnoreCase("--bye"))
		{
			quit();
			return;
		}

		String pathLogs = File::getSpecialLocation(File::currentExecutableFile).getParentDirectory().getFullPathName() + L"\\logs";
		File filePathLogs(pathLogs);
		filePathLogs.createDirectory();
		// logs
		mainLogger = new FileLogger(filePathLogs.getChildFile(ProjectInfo::projectName).withFileExtension("log"),
			getApplicationName(), 2*1024 * 1024);
		Logger::setCurrentLogger(mainLogger);

		gstHelpInitEnviroment();
		gst_init(nullptr, nullptr);
		gstHelpReigsterRtmp();

		LookAndFeel::setDefaultLookAndFeel(&m_look3);

		mainWindow = new MainWindow (getApplicationName());
#ifndef DEBUG
		mainWindow->minimiseButtonPressed();
#endif
		// encoder manager
		encoderManager = new nemoEncoderManager();
		encoderManager->setListener(dynamic_cast<nemoEncoderManagerListener*>(mainWindow->getContentComponent()));
		if (encoderManager->start() != 0)
		{
			// error;
		}

		// command line
		checkCmdLine(commandLine);
    }

    void shutdown() override
    {
		if (encoderManager)
		{
			encoderManager->stop();
			encoderManager = nullptr;
		}

		mainWindow = nullptr; // (deletes our window)
		// Add your application's shutdown code here..
		Logger::setCurrentLogger(nullptr);
		mainLogger = nullptr;

		uninstallCrashReport();
	}

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
		// the other instance's command-line arguments were.
		checkCmdLine(commandLine);

    }
	class MainWindow;
	class minTrayIcon : public SystemTrayIconComponent
	{
	public:
		minTrayIcon(MainWindow* mainWin)
			: m_mainWin(mainWin)
		{
			setIconImage(ImageCache::getFromMemory(icon_png, icon_pngSize));
		}
		virtual ~minTrayIcon()
		{

		}

		virtual void mouseDown(const MouseEvent& event) override
		{
			if (event.mods.isRightButtonDown())
			{
				PopupMenu m;
				m.addSectionHeader(ProjectInfo::projectName);
				m.addSeparator();
				m.addItem(1, L"显示编码管理器");
				m.addSeparator();
				m.addItem(2, L"退出");

				// It's always better to open menus asynchronously when possible.
				m.showMenuAsync(PopupMenu::Options(),
					ModalCallbackFunction::forComponent(menuInvocationCallback, this));
			}
		}
	protected:
		static void menuInvocationCallback(int chosenItemID, minTrayIcon* minTray)
		{
			switch (chosenItemID)
			{
			case 1:
				minTray->m_mainWin->setVisible(true);
				break;
			case 2:
				minTray->m_mainWin->closeButtonPressed();
				break;
			default:
				break;
			}
		}
	private:
		// Binary resources:
		static const char* icon_png;
		static const int icon_pngSize;
		MainWindow* m_mainWin;
	};


    //==============================================================================
    /*
        This class implements the desktop window that contains an instance of
        our MainContentComponent class.
    */
    class MainWindow    : public DocumentWindow
    {
    public:
        MainWindow (String name)  : DocumentWindow (name,
                                                    Colours::lightgrey,
													DocumentWindow::minimiseButton | DocumentWindow::closeButton)
        {
			getLookAndFeel().setDefaultSansSerifTypefaceName(L"宋体");
			setOpaque(true);

            setUsingNativeTitleBar (false);
            setContentOwned (new MainContentComponent(), true);
			setSize(640, 480);
            centreWithSize (getWidth(), getHeight());
            setVisible (true);

			m_trayIcon = new minTrayIcon(this); 
        }
		
		virtual ~MainWindow()
		{
			m_trayIcon = nullptr;
		}

        void closeButtonPressed() override
        {
			// This is called when the user tries to close this window. Here, we'll just
            // ask the app to quit when this happens, but you can change this to do
            // whatever you need.
			bool ret = AlertWindow::showOkCancelBox(AlertWindow::NoIcon
				, L"退出提示"
				, L"SE(Silent Encoders) 退出后，TVP将无法继续向外输出信号，是否继续"
				, L"继续退出"
				, L"取消"
				, this);
			if (ret)
			{
				JUCEApplication::getInstance()->systemRequestedQuit();
			}
        }
		void minimiseButtonPressed() override
		{
			setVisible(false);
		}

        /* Note: Be careful if you override any DocumentWindow methods - the base
           class uses a lot of them, so by overriding you might break its functionality.
           It's best to do all your work in your content component instead, but if
           you really have to override any DocumentWindow methods, make sure your
           subclass also calls the superclass's method.
        */
    private:
		ScopedPointer<minTrayIcon> m_trayIcon;
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)
    };

private:
	LookAndFeel_V3			m_look3;

	ScopedPointer<MainWindow> mainWindow;
	ScopedPointer<nemoEncoderManager> encoderManager;

	ScopedPointer<FileLogger> mainLogger;
};

// JUCER_RESOURCE: icon_png, 7066, "../../silentEncoder/Builds/VisualStudio2013/icon.png"
static const unsigned char resource_tray_icon_png[] = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 32, 0, 0, 0, 32, 8, 6, 0, 0, 0, 115, 122, 122, 244, 0, 0, 0, 4, 103, 65,
77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 6, 98, 75, 71, 68, 0, 255, 0, 255, 0, 255, 160, 189,
167, 147, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 46, 35, 0, 0, 46, 35, 1, 120, 165, 63, 118, 0, 0, 9, 17, 73, 68, 65, 84, 88, 195, 149, 151, 91, 108, 20, 215, 25, 199, 127, 103, 102, 246, 190, 107, 47, 54, 54, 6, 27, 131, 185, 27, 176, 160, 177, 113, 67, 49, 1, 165,
185, 0, 185, 160, 180, 165, 36, 109, 154, 166, 162, 145, 162, 42, 106, 85, 53, 234, 75, 213, 135, 62, 84, 125, 105, 210, 246, 169, 82, 213, 4, 69, 109, 154, 70, 10, 13, 73, 154, 40, 34, 52, 74, 34, 76, 92, 72, 28, 192, 96, 2, 20, 19, 95, 96, 125, 221, 181, 189,
222, 235, 204, 156, 211, 135, 185, 236, 154, 244, 165, 163, 253, 116, 102, 103, 118, 231, 255, 63, 223, 229, 255, 125, 35, 184, 237, 248, 218, 161, 23, 152, 24, 250, 48, 20, 175, 107, 91, 22, 136, 36, 155, 117, 61, 212, 128, 146, 66, 161, 64, 57, 166, 92,
67, 41, 148, 148, 254, 170, 252, 239, 18, 37, 149, 2, 144, 182, 57, 107, 155, 197, 155, 229, 242, 124, 106, 105, 107, 79, 190, 239, 248, 227, 139, 240, 132, 119, 178, 113, 215, 51, 20, 178, 227, 161, 165, 45, 93, 119, 133, 162, 245, 223, 211, 244, 64, 151,
208, 180, 165, 32, 98, 160, 156, 79, 21, 1, 23, 4, 165, 36, 72, 185, 136, 64, 133, 132, 20, 74, 202, 162, 146, 50, 35, 109, 107, 192, 182, 74, 127, 47, 229, 39, 255, 105, 4, 98, 11, 151, 207, 62, 87, 33, 176, 101, 207, 179, 76, 222, 56, 21, 91, 189, 253, 240,
79, 131, 209, 186, 159, 105, 154, 158, 68, 136, 42, 126, 213, 192, 238, 90, 13, 168, 92, 80, 143, 200, 109, 100, 42, 247, 236, 146, 109, 149, 94, 204, 205, 13, 255, 34, 24, 78, 102, 62, 255, 244, 247, 232, 70, 48, 198, 196, 208, 135, 250, 250, 238, 35, 71,
34, 181, 43, 126, 165, 233, 70, 141, 208, 52, 132, 166, 33, 132, 64, 8, 111, 21, 32, 4, 14, 182, 75, 2, 252, 112, 72, 41, 81, 10, 135, 183, 115, 3, 161, 148, 67, 222, 55, 12, 33, 180, 59, 12, 35, 106, 164, 70, 223, 255, 176, 161, 121, 151, 109, 28, 124, 246,
18, 125, 199, 158, 222, 20, 73, 52, 253, 72, 211, 141, 152, 3, 164, 249, 128, 222, 195, 164, 146, 104, 154, 160, 169, 33, 206, 198, 182, 37, 180, 46, 175, 33, 89, 19, 70, 41, 197, 66, 190, 204, 23, 163, 105, 174, 92, 155, 228, 230, 173, 12, 197, 130, 237,
248, 78, 8, 80, 158, 39, 61, 102, 66, 215, 244, 224, 147, 75, 155, 186, 223, 104, 104, 238, 233, 21, 128, 222, 222, 243, 147, 103, 234, 91, 238, 120, 78, 232, 1, 93, 104, 194, 221, 189, 230, 238, 216, 113, 251, 250, 85, 73, 14, 222, 189, 150, 205, 235, 150,
98, 90, 146, 155, 19, 89, 102, 102, 243, 72, 169, 136, 132, 3, 52, 54, 196, 9, 135, 3, 12, 143, 101, 120, 247, 228, 32, 231, 206, 141, 96, 150, 205, 74, 130, 250, 161, 145, 40, 105, 99, 22, 231, 126, 125, 249, 147, 223, 254, 210, 0, 162, 122, 48, 218, 33,
52, 93, 119, 54, 237, 238, 220, 181, 72, 200, 224, 192, 238, 213, 28, 188, 123, 45, 55, 39, 178, 188, 120, 236, 2, 151, 174, 76, 145, 153, 203, 99, 150, 45, 148, 146, 104, 40, 162, 97, 131, 85, 45, 73, 246, 236, 90, 199, 83, 63, 232, 225, 236, 167, 195, 188,
118, 236, 44, 51, 51, 217, 74, 58, 9, 39, 18, 2, 129, 208, 140, 237, 209, 120, 115, 194, 0, 162, 129, 96, 108, 69, 85, 65, 248, 103, 145, 112, 128, 167, 190, 185, 133, 157, 219, 154, 120, 233, 248, 32, 255, 234, 27, 38, 151, 43, 33, 80, 142, 105, 2, 164, 64,
74, 69, 118, 161, 196, 249, 75, 183, 184, 116, 57, 197, 230, 77, 203, 248, 246, 183, 118, 240, 195, 35, 123, 248, 243, 11, 31, 48, 51, 53, 127, 123, 181, 35, 132, 222, 24, 142, 54, 197, 52, 64, 87, 74, 233, 213, 55, 189, 100, 58, 124, 255, 58, 118, 109, 95,
206, 31, 95, 189, 192, 153, 129, 113, 148, 84, 44, 169, 13, 83, 155, 8, 185, 57, 85, 253, 64, 208, 53, 129, 45, 37, 231, 46, 140, 241, 187, 63, 156, 64, 104, 26, 79, 124, 255, 46, 226, 241, 176, 159, 180, 21, 16, 169, 219, 118, 201, 208, 252, 50, 67, 185,
58, 227, 100, 116, 231, 230, 70, 238, 223, 181, 138, 63, 189, 54, 64, 83, 125, 148, 231, 127, 190, 135, 53, 43, 107, 57, 180, 111, 35, 135, 15, 180, 35, 61, 1, 242, 75, 211, 37, 142, 67, 100, 114, 42, 203, 95, 254, 218, 75, 67, 99, 13, 247, 238, 219, 134,
64, 44, 34, 173, 80, 66, 41, 91, 215, 170, 202, 220, 127, 96, 36, 164, 243, 200, 215, 215, 242, 241, 185, 91, 88, 166, 205, 19, 15, 183, 179, 178, 41, 206, 227, 15, 109, 38, 95, 48, 41, 148, 44, 14, 29, 216, 76, 109, 34, 196, 145, 71, 59, 217, 180, 161, 145,
237, 91, 150, 243, 141, 7, 59, 208, 116, 13, 165, 28, 18, 55, 199, 210, 188, 253, 214, 103, 116, 223, 185, 158, 21, 45, 117, 142, 104, 121, 158, 80, 8, 148, 66, 115, 217, 56, 202, 165, 36, 182, 37, 217, 182, 161, 129, 149, 77, 9, 62, 248, 247, 8, 143, 220,
179, 142, 88, 36, 128, 208, 4, 187, 59, 155, 89, 211, 82, 139, 101, 217, 212, 47, 137, 112, 79, 207, 90, 244, 128, 129, 105, 73, 76, 91, 82, 178, 60, 175, 56, 66, 164, 105, 130, 254, 79, 135, 72, 103, 114, 116, 239, 220, 80, 21, 98, 95, 23, 208, 188, 160,
123, 174, 20, 40, 118, 116, 52, 49, 52, 54, 71, 109, 60, 72, 251, 154, 58, 63, 74, 182, 130, 251, 122, 218, 104, 93, 94, 195, 249, 193, 113, 118, 119, 183, 210, 219, 55, 196, 232, 104, 154, 235, 55, 166, 57, 117, 250, 63, 128, 162, 161, 62, 78, 48, 160, 3,
138, 124, 190, 196, 249, 254, 27, 108, 104, 111, 33, 18, 13, 125, 41, 23, 124, 2, 94, 189, 134, 2, 130, 85, 205, 181, 12, 92, 153, 100, 83, 91, 29, 193, 128, 142, 84, 110, 150, 40, 133, 37, 21, 119, 125, 117, 21, 251, 247, 174, 227, 232, 171, 253, 60, 121,
184, 147, 157, 93, 173, 236, 218, 177, 154, 39, 30, 237, 102, 105, 93, 140, 31, 63, 189, 151, 214, 214, 58, 164, 237, 252, 113, 232, 250, 4, 209, 120, 152, 228, 146, 56, 170, 242, 48, 64, 97, 0, 194, 109, 26, 40, 32, 22, 9, 144, 72, 132, 152, 156, 94, 96,
251, 166, 198, 138, 220, 186, 255, 145, 10, 66, 65, 131, 142, 246, 38, 20, 240, 143, 183, 7, 216, 184, 190, 17, 165, 224, 216, 155, 231, 72, 103, 114, 28, 125, 185, 143, 84, 42, 227, 10, 169, 34, 51, 147, 197, 178, 37, 241, 132, 83, 13, 162, 42, 31, 181,
106, 61, 87, 82, 98, 56, 2, 72, 118, 161, 68, 32, 160, 97, 227, 128, 86, 76, 97, 75, 69, 36, 18, 96, 203, 198, 101, 172, 108, 78, 146, 47, 148, 41, 150, 76, 150, 53, 36, 48, 52, 193, 234, 150, 36, 145, 144, 225, 19, 151, 74, 33, 125, 207, 87, 85, 142, 75, 64,
185, 29, 6, 148, 164, 92, 182, 48, 45, 73, 44, 26, 160, 88, 178, 145, 210, 137, 189, 99, 206, 131, 108, 5, 182, 84, 4, 67, 1, 190, 123, 168, 147, 96, 64, 103, 110, 190, 64, 247, 142, 54, 182, 110, 109, 161, 171, 171, 205, 217, 173, 91, 170, 254, 12, 33, 189,
153, 162, 34, 120, 158, 7, 148, 247, 227, 236, 66, 145, 204, 92, 145, 186, 100, 132, 161, 209, 180, 15, 230, 24, 174, 41, 127, 53, 109, 197, 3, 251, 59, 104, 108, 72, 112, 234, 244, 53, 246, 237, 223, 198, 95, 94, 233, 99, 120, 120, 218, 81, 94, 41, 73, 214,
197, 81, 8, 230, 231, 114, 139, 188, 160, 148, 159, 132, 149, 158, 94, 44, 150, 185, 62, 60, 195, 198, 117, 141, 92, 190, 58, 73, 174, 96, 86, 72, 40, 133, 165, 20, 182, 2, 75, 42, 44, 247, 186, 66, 208, 217, 217, 198, 142, 29, 107, 120, 235, 205, 126, 14,
60, 220, 69, 115, 75, 157, 219, 162, 21, 173, 109, 203, 88, 200, 22, 152, 77, 103, 43, 101, 232, 38, 161, 227, 1, 89, 233, 88, 210, 146, 124, 242, 217, 40, 45, 205, 73, 50, 179, 121, 46, 93, 157, 68, 2, 150, 4, 203, 118, 170, 192, 114, 61, 226, 157, 155, 182,
162, 38, 25, 101, 75, 199, 74, 214, 109, 88, 206, 149, 193, 49, 230, 103, 115, 160, 20, 225, 112, 128, 246, 109, 171, 185, 58, 56, 66, 33, 87, 244, 67, 226, 9, 146, 27, 130, 74, 187, 20, 66, 49, 112, 105, 140, 145, 177, 12, 119, 118, 183, 113, 252, 157, 1,
102, 231, 75, 88, 10, 76, 143, 132, 173, 156, 115, 169, 28, 98, 82, 81, 182, 36, 241, 218, 40, 93, 59, 215, 83, 42, 91, 148, 203, 22, 210, 182, 233, 232, 92, 75, 162, 54, 70, 255, 233, 203, 126, 14, 248, 51, 165, 175, 3, 94, 138, 187, 201, 152, 207, 149, 120,
243, 157, 11, 124, 101, 251, 74, 132, 38, 120, 245, 245, 126, 10, 37, 11, 219, 37, 97, 122, 187, 183, 157, 221, 251, 102, 41, 130, 145, 16, 7, 31, 235, 161, 97, 89, 45, 77, 43, 234, 216, 187, 191, 147, 79, 122, 7, 25, 31, 157, 118, 202, 175, 202, 253, 21,
41, 246, 228, 211, 243, 2, 138, 243, 23, 70, 56, 113, 114, 144, 195, 135, 118, 112, 51, 53, 203, 139, 47, 245, 50, 57, 147, 195, 118, 195, 225, 131, 250, 161, 0, 27, 40, 20, 45, 250, 62, 26, 196, 50, 45, 14, 126, 231, 46, 166, 198, 51, 156, 58, 241, 153, 63,
168, 86, 73, 181, 2, 129, 14, 196, 235, 151, 119, 61, 20, 12, 213, 174, 175, 40, 148, 147, 189, 67, 67, 147, 36, 151, 196, 184, 247, 222, 14, 174, 94, 27, 231, 228, 201, 139, 20, 75, 22, 177, 68, 4, 97, 232, 72, 33, 176, 37, 148, 45, 197, 220, 124, 145, 203,
131, 99, 156, 120, 227, 12, 147, 169, 52, 15, 30, 238, 33, 159, 47, 113, 236, 232, 73, 178, 179, 11, 78, 69, 84, 73, 190, 180, 205, 84, 110, 126, 232, 21, 3, 48, 203, 133, 76, 90, 37, 90, 43, 51, 160, 16, 8, 160, 144, 47, 241, 242, 203, 189, 140, 221, 76, 115,
223, 190, 109, 164, 82, 179, 124, 220, 123, 149, 211, 189, 87, 137, 197, 67, 132, 35, 65, 148, 130, 82, 201, 100, 54, 189, 128, 17, 52, 232, 184, 99, 45, 107, 219, 91, 184, 216, 127, 157, 247, 142, 127, 204, 92, 58, 235, 130, 75, 55, 204, 78, 101, 72, 187,
156, 46, 228, 199, 139, 6, 80, 44, 23, 51, 183, 164, 109, 42, 161, 25, 194, 27, 155, 188, 185, 168, 92, 50, 121, 239, 221, 243, 12, 94, 28, 101, 207, 221, 91, 121, 224, 96, 39, 150, 165, 152, 158, 158, 103, 122, 58, 139, 148, 138, 88, 34, 66, 178, 46, 65,
40, 18, 36, 53, 54, 195, 107, 71, 79, 242, 249, 133, 27, 88, 166, 85, 1, 175, 234, 146, 72, 137, 85, 206, 94, 51, 203, 179, 11, 6, 80, 156, 157, 28, 56, 91, 83, 183, 105, 34, 28, 109, 108, 82, 74, 185, 28, 42, 35, 26, 192, 232, 200, 20, 127, 123, 233, 3, 234,
151, 214, 176, 114, 117, 3, 43, 90, 234, 169, 73, 198, 16, 154, 96, 106, 98, 150, 129, 254, 235, 12, 95, 79, 49, 149, 202, 80, 46, 153, 206, 72, 89, 181, 115, 31, 92, 41, 108, 187, 188, 144, 207, 141, 157, 2, 138, 134, 174, 135, 172, 220, 252, 200, 217, 204,
196, 185, 147, 13, 45, 187, 31, 211, 245, 144, 238, 168, 244, 98, 2, 2, 133, 84, 138, 201, 241, 12, 19, 169, 180, 211, 186, 133, 87, 210, 206, 91, 146, 112, 53, 86, 8, 175, 187, 86, 189, 69, 249, 29, 215, 166, 152, 191, 245, 126, 122, 234, 204, 169, 198,
229, 123, 149, 174, 148, 13, 176, 80, 200, 165, 50, 186, 30, 106, 13, 133, 235, 91, 132, 102, 232, 213, 163, 154, 247, 106, 134, 242, 252, 226, 128, 123, 243, 67, 245, 32, 187, 120, 76, 147, 139, 94, 233, 164, 109, 202, 252, 194, 200, 233, 169, 241, 143,
126, 83, 46, 207, 94, 204, 45, 124, 225, 15, 163, 82, 73, 107, 60, 55, 63, 124, 163, 92, 76, 75, 16, 113, 129, 22, 68, 74, 13, 148, 166, 164, 141, 84, 54, 74, 186, 166, 42, 171, 188, 253, 218, 34, 179, 176, 205, 130, 41, 237, 98, 169, 88, 152, 26, 155, 77,
95, 120, 61, 61, 125, 230, 249, 82, 113, 186, 15, 48, 249, 146, 159, 193, 0, 86, 8, 205, 216, 26, 10, 215, 111, 10, 4, 19, 203, 2, 161, 100, 173, 123, 189, 122, 164, 189, 109, 42, 86, 254, 168, 87, 117, 79, 2, 102, 185, 148, 201, 74, 105, 78, 155, 229, 185,
65, 203, 92, 56, 15, 140, 227, 72, 6, 255, 139, 128, 119, 232, 64, 8, 8, 187, 224, 58, 255, 255, 33, 93, 32, 27, 40, 185, 102, 223, 254, 163, 255, 2, 239, 32, 59, 152, 11, 128, 251, 167, 0, 0, 0, 37, 116, 69, 88, 116, 100, 97, 116, 101, 58, 99, 114, 101, 97,
116, 101, 0, 50, 48, 49, 52, 45, 48, 51, 45, 48, 52, 84, 50, 49, 58, 48, 49, 58, 51, 51, 43, 48, 56, 58, 48, 48, 248, 86, 69, 102, 0, 0, 0, 37, 116, 69, 88, 116, 100, 97, 116, 101, 58, 109, 111, 100, 105, 102, 121, 0, 50, 48, 49, 52, 45, 48, 51, 45, 48, 52, 84, 50,
49, 58, 48, 49, 58, 51, 51, 43, 48, 56, 58, 48, 48, 137, 11, 253, 218, 0, 0, 0, 77, 116, 69, 88, 116, 115, 111, 102, 116, 119, 97, 114, 101, 0, 73, 109, 97, 103, 101, 77, 97, 103, 105, 99, 107, 32, 54, 46, 56, 46, 56, 45, 55, 32, 81, 49, 54, 32, 120, 56, 54, 95,
54, 52, 32, 50, 48, 49, 52, 45, 48, 50, 45, 50, 56, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 105, 109, 97, 103, 101, 109, 97, 103, 105, 99, 107, 46, 111, 114, 103, 89, 164, 95, 127, 0, 0, 0, 24, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 68,
111, 99, 117, 109, 101, 110, 116, 58, 58, 80, 97, 103, 101, 115, 0, 49, 167, 255, 187, 47, 0, 0, 0, 25, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 73, 109, 97, 103, 101, 58, 58, 72, 101, 105, 103, 104, 116, 0, 49, 56, 52, 56, 182, 217, 98, 168, 0, 0, 0,
24, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 73, 109, 97, 103, 101, 58, 58, 87, 105, 100, 116, 104, 0, 49, 56, 52, 56, 163, 144, 190, 177, 0, 0, 0, 25, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 77, 105, 109, 101, 116, 121, 112, 101, 0, 105, 109,
97, 103, 101, 47, 112, 110, 103, 63, 178, 86, 78, 0, 0, 0, 23, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 77, 84, 105, 109, 101, 0, 49, 51, 57, 51, 57, 51, 56, 48, 57, 51, 139, 239, 210, 158, 0, 0, 0, 18, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 83,
105, 122, 101, 0, 50, 55, 53, 75, 66, 66, 138, 228, 16, 112, 0, 0, 0, 98, 116, 69, 88, 116, 84, 104, 117, 109, 98, 58, 58, 85, 82, 73, 0, 102, 105, 108, 101, 58, 47, 47, 47, 104, 111, 109, 101, 47, 102, 116, 112, 47, 49, 53, 50, 48, 47, 101, 97, 115, 121, 105,
99, 111, 110, 46, 99, 110, 47, 101, 97, 115, 121, 105, 99, 111, 110, 46, 99, 110, 47, 99, 100, 110, 45, 105, 109, 103, 46, 101, 97, 115, 121, 105, 99, 111, 110, 46, 99, 110, 47, 112, 110, 103, 47, 49, 49, 51, 56, 50, 47, 49, 49, 51, 56, 50, 57, 56, 46, 112,
110, 103, 45, 167, 114, 7, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130, 0, 0 };

const char* silentEncoderApplication::minTrayIcon::icon_png = (const char*)resource_tray_icon_png;
const int silentEncoderApplication::minTrayIcon::icon_pngSize = 2985;
//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (silentEncoderApplication)
